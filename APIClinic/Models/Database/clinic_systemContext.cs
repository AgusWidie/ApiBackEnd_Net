// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace APIClinic.Models.Database
{
    public partial class clinic_systemContext : DbContext
    {
        public clinic_systemContext()
        {
        }

        public clinic_systemContext(DbContextOptions<clinic_systemContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AbsentDoctor> AbsentDoctor { get; set; }
        public virtual DbSet<Branch> Branch { get; set; }
        public virtual DbSet<Clinic> Clinic { get; set; }
        public virtual DbSet<Doctor> Doctor { get; set; }
        public virtual DbSet<Drug> Drug { get; set; }
        public virtual DbSet<DrugLog> DrugLog { get; set; }
        public virtual DbSet<ExaminationDoctor> ExaminationDoctor { get; set; }
        public virtual DbSet<ExaminationLab> ExaminationLab { get; set; }
        public virtual DbSet<Laboratorium> Laboratorium { get; set; }
        public virtual DbSet<LogError> LogError { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<PatientRegistration> PatientRegistration { get; set; }
        public virtual DbSet<PatientRegistrationLab> PatientRegistrationLab { get; set; }
        public virtual DbSet<Profil> Profil { get; set; }
        public virtual DbSet<ProfilMenu> ProfilMenu { get; set; }
        public virtual DbSet<ProfilUser> ProfilUser { get; set; }
        public virtual DbSet<QueueDoctor> QueueDoctor { get; set; }
        public virtual DbSet<QueueLab> QueueLab { get; set; }
        public virtual DbSet<ScheduleDoctor> ScheduleDoctor { get; set; }
        public virtual DbSet<Specialist> Specialist { get; set; }
        public virtual DbSet<SpecialistDoctor> SpecialistDoctor { get; set; }
        public virtual DbSet<TransactionDetailPatient> TransactionDetailPatient { get; set; }
        public virtual DbSet<TransactionHeaderPatient> TransactionHeaderPatient { get; set; }
        public virtual DbSet<TransactionLab> TransactionLab { get; set; }
        public virtual DbSet<UserToken> UserToken { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_0900_ai_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<AbsentDoctor>(entity =>
            {
                entity.ToTable("absent_doctor");

                entity.HasIndex(e => e.BranchId, "BranchId");

                entity.HasIndex(e => e.ClinicId, "ClinicId");

                entity.HasIndex(e => e.DoctorId, "DoctorId");

                entity.Property(e => e.AbsenType).HasMaxLength(50);

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Day).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DoctorId).HasDefaultValueSql("'0'");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.AbsentDoctor)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("absent_doctor_ibfk_2");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.AbsentDoctor)
                    .HasForeignKey(d => d.ClinicId)
                    .HasConstraintName("absent_doctor_ibfk_1");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.AbsentDoctor)
                    .HasForeignKey(d => d.DoctorId)
                    .HasConstraintName("absent_doctor_ibfk_3");
            });

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.ToTable("branch");

                entity.HasIndex(e => e.ClinicId, "ClinicId");

                entity.HasIndex(e => e.Name, "Name");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Telp).HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.Branch)
                    .HasForeignKey(d => d.ClinicId)
                    .HasConstraintName("branch_ibfk_1");
            });

            modelBuilder.Entity<Clinic>(entity =>
            {
                entity.ToTable("clinic");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Telp).HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Doctor>(entity =>
            {
                entity.ToTable("doctor");

                entity.HasIndex(e => e.BranchId, "BranchId");

                entity.HasIndex(e => e.ClinicId, "ClinicId");

                entity.HasIndex(e => e.DoctorName, "DoctorName");

                entity.Property(e => e.Active)
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("b'1'");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DoctorName).HasMaxLength(50);

                entity.Property(e => e.Education).HasMaxLength(100);

                entity.Property(e => e.Gender).HasMaxLength(20);

                entity.Property(e => e.MobilePhone).HasMaxLength(50);

                entity.Property(e => e.NoTelephone).HasMaxLength(50);

                entity.Property(e => e.StatusDoctor).HasMaxLength(50);

                entity.Property(e => e.StatusEmployee).HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.Doctor)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("doctor_ibfk_2");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.Doctor)
                    .HasForeignKey(d => d.ClinicId)
                    .HasConstraintName("doctor_ibfk_1");
            });

            modelBuilder.Entity<Drug>(entity =>
            {
                entity.ToTable("drug");

                entity.HasIndex(e => e.BranchId, "BranchId");

                entity.HasIndex(e => e.ClinicId, "ClinicId");

                entity.Property(e => e.Active)
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("b'1'");

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DrugName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Price).HasDefaultValueSql("'0'");

                entity.Property(e => e.Stock).HasDefaultValueSql("'0'");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.Drug)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("drug_ibfk_2");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.Drug)
                    .HasForeignKey(d => d.ClinicId)
                    .HasConstraintName("drug_ibfk_1");
            });

            modelBuilder.Entity<DrugLog>(entity =>
            {
                entity.ToTable("drug_log");

                entity.Property(e => e.Active)
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("b'1'");

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DrugName).HasMaxLength(50);

                entity.Property(e => e.Price).HasDefaultValueSql("'0'");

                entity.Property(e => e.Stock).HasDefaultValueSql("'0'");

                entity.Property(e => e.UnitType).HasMaxLength(50);
            });

            modelBuilder.Entity<ExaminationDoctor>(entity =>
            {
                entity.ToTable("examination_doctor");

                entity.HasIndex(e => e.BranchId, "BranchId");

                entity.HasIndex(e => e.ClinicId, "ClinicId");

                entity.HasIndex(e => e.DoctorId, "DoctorId");

                entity.HasIndex(e => e.QueueNo, "QueueNo");

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DoctorId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ExaminationDate).HasColumnType("datetime");

                entity.Property(e => e.Inspection).HasMaxLength(1000);

                entity.Property(e => e.QueueNo).HasMaxLength(50);

                entity.Property(e => e.Recipe).HasMaxLength(1000);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.ExaminationDoctor)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("examination_doctor_ibfk_4");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.ExaminationDoctor)
                    .HasForeignKey(d => d.ClinicId)
                    .HasConstraintName("examination_doctor_ibfk_3");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.ExaminationDoctor)
                    .HasForeignKey(d => d.DoctorId)
                    .HasConstraintName("examination_doctor_ibfk_1");
            });

            modelBuilder.Entity<ExaminationLab>(entity =>
            {
                entity.ToTable("examination_lab");

                entity.HasIndex(e => e.BranchId, "BranchId");

                entity.HasIndex(e => e.ClinicId, "ClinicId");

                entity.HasIndex(e => e.QueueNo, "QueueNo");

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.ExaminationDate).HasColumnType("datetime");

                entity.Property(e => e.QueueNo).HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.ExaminationLab)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("examination_lab_ibfk_2");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.ExaminationLab)
                    .HasForeignKey(d => d.ClinicId)
                    .HasConstraintName("examination_lab_ibfk_1");
            });

            modelBuilder.Entity<Laboratorium>(entity =>
            {
                entity.ToTable("laboratorium");

                entity.Property(e => e.Active)
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("b'1'");

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.LaboratoriumName).HasMaxLength(150);

                entity.Property(e => e.Price).HasDefaultValueSql("'0'");

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<LogError>(entity =>
            {
                entity.ToTable("log_error");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.ErrorDate).HasColumnType("datetime");

                entity.Property(e => e.ErrorDeskripsi).HasMaxLength(5000);

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.ToTable("menu");

                entity.Property(e => e.ActionName).HasMaxLength(150);

                entity.Property(e => e.Active)
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("b'1'");

                entity.Property(e => e.ControllerName).HasMaxLength(150);

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Icon).HasMaxLength(150);

                entity.Property(e => e.IsHeader)
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("b'0'");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Sort).HasDefaultValueSql("'1'");

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<PatientRegistration>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.QueueNo })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.ToTable("patient_registration");

                entity.HasIndex(e => e.FamilyCardNo, "FamilyCardNo");

                entity.HasIndex(e => e.Ktpno, "KTPNo");

                entity.HasIndex(e => e.Name, "Name");

                entity.HasIndex(e => e.QueueNo, "QueueNo");

                entity.HasIndex(e => e.SpecialistDoctorId, "SpecialistDoctorId");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.QueueNo).HasMaxLength(50);

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Bpjsno)
                    .HasMaxLength(50)
                    .HasColumnName("BPJSNo");

                entity.Property(e => e.Complaint)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Education).HasMaxLength(50);

                entity.Property(e => e.FamilyCardNo).HasMaxLength(50);

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.InsuranceName).HasMaxLength(50);

                entity.Property(e => e.InsuranceNo).HasMaxLength(50);

                entity.Property(e => e.Ktpno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("KTPNo");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Religion).HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.Work).HasMaxLength(50);

                entity.HasOne(d => d.SpecialistDoctor)
                    .WithMany(p => p.PatientRegistration)
                    .HasForeignKey(d => d.SpecialistDoctorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("patient_registration_ibfk_1");
            });

            modelBuilder.Entity<PatientRegistrationLab>(entity =>
            {
                entity.ToTable("patient_registration_lab");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Bpjsno)
                    .HasMaxLength(50)
                    .HasColumnName("BPJSNo");

                entity.Property(e => e.CreateBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Education).HasMaxLength(150);

                entity.Property(e => e.FamilyCardNo).HasMaxLength(50);

                entity.Property(e => e.Gender).HasMaxLength(50);

                entity.Property(e => e.InsuranceName).HasMaxLength(150);

                entity.Property(e => e.InsuranceNo).HasMaxLength(50);

                entity.Property(e => e.Ktpno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("KTPNo");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.QueueNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.Property(e => e.Religion).HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.Work).HasMaxLength(150);
            });

            modelBuilder.Entity<Profil>(entity =>
            {
                entity.ToTable("profil");

                entity.Property(e => e.Active)
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("b'1'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProfilMenu>(entity =>
            {
                entity.ToTable("profil_menu");

                entity.HasIndex(e => e.MenuId, "MenuId");

                entity.HasIndex(e => e.ParentMenuId, "ParentMenuId");

                entity.HasIndex(e => e.ProfilId, "ProfilId");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.MenuId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ParentMenuId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ProfilId).HasDefaultValueSql("'0'");

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.ProfilMenuMenu)
                    .HasForeignKey(d => d.MenuId)
                    .HasConstraintName("profil_menu_ibfk_3");

                entity.HasOne(d => d.ParentMenu)
                    .WithMany(p => p.ProfilMenuParentMenu)
                    .HasForeignKey(d => d.ParentMenuId)
                    .HasConstraintName("profil_menu_ibfk_2");

                entity.HasOne(d => d.Profil)
                    .WithMany(p => p.ProfilMenu)
                    .HasForeignKey(d => d.ProfilId)
                    .HasConstraintName("profil_menu_ibfk_1");
            });

            modelBuilder.Entity<ProfilUser>(entity =>
            {
                entity.ToTable("profil_user");

                entity.HasIndex(e => e.ProfilId, "ProfilId");

                entity.HasIndex(e => e.UserId, "UserId");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.ProfilId).HasDefaultValueSql("'0'");

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasDefaultValueSql("'0'");

                entity.HasOne(d => d.Profil)
                    .WithMany(p => p.ProfilUser)
                    .HasForeignKey(d => d.ProfilId)
                    .HasConstraintName("profil_user_ibfk_1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProfilUser)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("profil_user_ibfk_2");
            });

            modelBuilder.Entity<QueueDoctor>(entity =>
            {
                entity.ToTable("queue_doctor");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.IsPrint).HasDefaultValueSql("'0'");

                entity.Property(e => e.QueueDate).HasColumnType("datetime");

                entity.Property(e => e.QueueNo).HasMaxLength(50);

                entity.Property(e => e.SpecialistDoctorId).HasDefaultValueSql("'0'");

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<QueueLab>(entity =>
            {
                entity.ToTable("queue_lab");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.IsPrint).HasDefaultValueSql("'0'");

                entity.Property(e => e.LaboratoriumId).HasDefaultValueSql("'0'");

                entity.Property(e => e.QueueDate).HasColumnType("datetime");

                entity.Property(e => e.QueueNo).HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ScheduleDoctor>(entity =>
            {
                entity.ToTable("schedule_doctor");

                entity.HasIndex(e => e.BranchId, "BranchId");

                entity.HasIndex(e => e.ClinicId, "ClinicId");

                entity.HasIndex(e => e.Day, "Day");

                entity.HasIndex(e => e.DoctorId, "DoctorId");

                entity.HasIndex(e => e.SpecialistDoctorId, "SpecialistDoctorId");

                entity.Property(e => e.Active)
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("b'1'");

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Day).HasMaxLength(50);

                entity.Property(e => e.DoctorId).HasDefaultValueSql("'0'");

                entity.Property(e => e.EndTime).HasColumnType("time");

                entity.Property(e => e.SpecialistDoctorId).HasDefaultValueSql("'0'");

                entity.Property(e => e.StartTime).HasColumnType("time");

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.ScheduleDoctor)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("schedule_doctor_ibfk_3");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.ScheduleDoctor)
                    .HasForeignKey(d => d.ClinicId)
                    .HasConstraintName("schedule_doctor_ibfk_2");

                entity.HasOne(d => d.Doctor)
                    .WithMany(p => p.ScheduleDoctor)
                    .HasForeignKey(d => d.DoctorId)
                    .HasConstraintName("schedule_doctor_ibfk_1");

                entity.HasOne(d => d.SpecialistDoctor)
                    .WithMany(p => p.ScheduleDoctor)
                    .HasForeignKey(d => d.SpecialistDoctorId)
                    .HasConstraintName("schedule_doctor_ibfk_4");
            });

            modelBuilder.Entity<Specialist>(entity =>
            {
                entity.ToTable("specialist");

                entity.Property(e => e.Active).HasColumnType("bit(1)");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<SpecialistDoctor>(entity =>
            {
                entity.ToTable("specialist_doctor");

                entity.HasIndex(e => e.BranchId, "BranchId");

                entity.HasIndex(e => e.ClinicId, "ClinicId");

                entity.HasIndex(e => e.SpecialistId, "SpecialistId");

                entity.Property(e => e.Active)
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("b'1'");

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DoctorId).HasDefaultValueSql("'0'");

                entity.Property(e => e.SpecialistId).HasDefaultValueSql("'0'");

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.SpecialistDoctor)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("specialist_doctor_ibfk_2");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.SpecialistDoctor)
                    .HasForeignKey(d => d.ClinicId)
                    .HasConstraintName("specialist_doctor_ibfk_1");

                entity.HasOne(d => d.Specialist)
                    .WithMany(p => p.SpecialistDoctor)
                    .HasForeignKey(d => d.SpecialistId)
                    .HasConstraintName("specialist_doctor_ibfk_3");
            });

            modelBuilder.Entity<TransactionDetailPatient>(entity =>
            {
                entity.ToTable("transaction_detail_patient");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DrugId).HasDefaultValueSql("'0'");

                entity.Property(e => e.Price).HasDefaultValueSql("'0'");

                entity.Property(e => e.Qty).HasDefaultValueSql("'0'");

                entity.Property(e => e.Subtotal).HasDefaultValueSql("'0'");

                entity.Property(e => e.TransactionNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UnitType).HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TransactionHeaderPatient>(entity =>
            {
                entity.ToTable("transaction_header_patient");

                entity.Property(e => e.Bpjsno)
                    .HasMaxLength(50)
                    .HasColumnName("BPJSNo");

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.InsuranceName).HasMaxLength(50);

                entity.Property(e => e.InsuranceNo).HasMaxLength(50);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Total).HasDefaultValueSql("'0'");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TransactionLab>(entity =>
            {
                entity.ToTable("transaction_lab");

                entity.HasIndex(e => e.BranchId, "BranchId");

                entity.HasIndex(e => e.ClinicId, "ClinicId");

                entity.HasIndex(e => e.ExaminationLabId, "ExaminationLabId");

                entity.Property(e => e.Bpjsno)
                    .HasMaxLength(50)
                    .HasColumnName("BPJSNo");

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.ExaminationLabId).HasDefaultValueSql("'0'");

                entity.Property(e => e.InsuranceName).HasMaxLength(50);

                entity.Property(e => e.InsuranceNo).HasMaxLength(50);

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.Total).HasDefaultValueSql("'0'");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionNo).HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.TransactionLab)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("transaction_lab_ibfk_2");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.TransactionLab)
                    .HasForeignKey(d => d.ClinicId)
                    .HasConstraintName("transaction_lab_ibfk_1");

                entity.HasOne(d => d.ExaminationLab)
                    .WithMany(p => p.TransactionLab)
                    .HasForeignKey(d => d.ExaminationLabId)
                    .HasConstraintName("transaction_lab_ibfk_3");
            });

            modelBuilder.Entity<UserToken>(entity =>
            {
                entity.ToTable("user_token");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.TokenExpired).HasColumnType("datetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.ToTable("users");

                entity.HasIndex(e => e.BranchId, "BranchId");

                entity.HasIndex(e => e.ClinicId, "ClinicId");

                entity.HasIndex(e => e.Name, "Name");

                entity.HasIndex(e => e.UserName, "UserName");

                entity.Property(e => e.Active)
                    .HasColumnType("bit(1)")
                    .HasDefaultValueSql("b'1'");

                entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");

                entity.Property(e => e.ClinicId).HasDefaultValueSql("'0'");

                entity.Property(e => e.CreateBy).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.Password).HasMaxLength(500);

                entity.Property(e => e.PasswordExpired).HasColumnType("datetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.HasOne(d => d.Branch)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.BranchId)
                    .HasConstraintName("users_ibfk_2");

                entity.HasOne(d => d.Clinic)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.ClinicId)
                    .HasConstraintName("users_ibfk_1");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}