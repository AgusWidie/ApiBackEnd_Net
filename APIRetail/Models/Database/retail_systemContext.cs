// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace APIRetail.Models.Database;

public partial class retail_systemContext : DbContext
{
    public retail_systemContext(DbContextOptions<retail_systemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Branch> Branch { get; set; }

    public virtual DbSet<Company> Company { get; set; }

    public virtual DbSet<Customer> Customer { get; set; }

    public virtual DbSet<DailyStock> DailyStock { get; set; }

    public virtual DbSet<LogError> LogError { get; set; }

    public virtual DbSet<LogJob> LogJob { get; set; }

    public virtual DbSet<Menu> Menu { get; set; }

    public virtual DbSet<Message> Message { get; set; }

    public virtual DbSet<MonthlyStock> MonthlyStock { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    public virtual DbSet<ProductPriceRate> ProductPriceRate { get; set; }

    public virtual DbSet<ProductType> ProductType { get; set; }

    public virtual DbSet<Profil> Profil { get; set; }

    public virtual DbSet<ProfilMenu> ProfilMenu { get; set; }

    public virtual DbSet<ProfilUser> ProfilUser { get; set; }

    public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetail { get; set; }

    public virtual DbSet<PurchaseOrderHeader> PurchaseOrderHeader { get; set; }

    public virtual DbSet<SalesOrderDetail> SalesOrderDetail { get; set; }

    public virtual DbSet<SalesOrderHeader> SalesOrderHeader { get; set; }

    public virtual DbSet<Schedule> Schedule { get; set; }

    public virtual DbSet<SendEmail> SendEmail { get; set; }

    public virtual DbSet<SendEmailFail> SendEmailFail { get; set; }

    public virtual DbSet<SendSms> SendSms { get; set; }

    public virtual DbSet<SendSmsFail> SendSmsFail { get; set; }

    public virtual DbSet<SendWhatsapp> SendWhatsapp { get; set; }

    public virtual DbSet<SendWhatsappFail> SendWhatsappFail { get; set; }

    public virtual DbSet<StockOpname> StockOpname { get; set; }

    public virtual DbSet<Supplier> Supplier { get; set; }

    public virtual DbSet<UserToken> UserToken { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("branch");

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Fax).HasMaxLength(15);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Telp).HasMaxLength(50);
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("company");

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Fax).HasMaxLength(15);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Telp).HasMaxLength(50);
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("customer");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.Name, "Name").IsUnique();

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.Ktpnumber)
                .HasMaxLength(50)
                .HasColumnName("KTPNumber");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Telephone).HasMaxLength(50);
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.WhatsApp).HasMaxLength(50);

            entity.HasOne(d => d.Branch).WithMany(p => p.Customer)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("customer_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.Customer)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("customer_ibfk_1");
        });

        modelBuilder.Entity<DailyStock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("daily_stock");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.ProductId, "ProductId");

            entity.HasIndex(e => e.ProductTypeId, "ProductTypeId");

            entity.HasIndex(e => e.StockDate, "StockDate");

            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.ProductId).HasDefaultValueSql("'0'");
            entity.Property(e => e.ProductTypeId).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockBuy).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockBuyPrice).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockFirst).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockLast).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockSell).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockSellPrice).HasDefaultValueSql("'0'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.DailyStock)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("daily_stock_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.DailyStock)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("daily_stock_ibfk_1");

            entity.HasOne(d => d.Product).WithMany(p => p.DailyStock)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("daily_stock_ibfk_4");

            entity.HasOne(d => d.ProductType).WithMany(p => p.DailyStock)
                .HasForeignKey(d => d.ProductTypeId)
                .HasConstraintName("daily_stock_ibfk_3");
        });

        modelBuilder.Entity<LogError>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("log_error");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.ErrorDate).HasColumnType("datetime");
            entity.Property(e => e.ErrorDeskripsi).HasMaxLength(500);
            entity.Property(e => e.ServiceName).HasMaxLength(50);
        });

        modelBuilder.Entity<LogJob>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("log_job");

            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Error)
                .HasDefaultValueSql("b'0'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.JobFinish).HasColumnType("datetime");
            entity.Property(e => e.JobName).HasMaxLength(50);
            entity.Property(e => e.JobStart).HasColumnType("datetime");
            entity.Property(e => e.Success)
                .HasDefaultValueSql("b'0'")
                .HasColumnType("bit(1)");
        });

        modelBuilder.Entity<Menu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("menu");

            entity.HasIndex(e => e.Name, "Name").IsUnique();

            entity.Property(e => e.ActionName).HasMaxLength(50);
            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.ControllerName).HasMaxLength(50);
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Icon).HasMaxLength(50);
            entity.Property(e => e.IsHeader)
                .HasDefaultValueSql("b'0'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Sort).HasDefaultValueSql("'1'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("message");

            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.MessageData).HasMaxLength(500);
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<MonthlyStock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("monthly_stock");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.Month, "Month");

            entity.HasIndex(e => e.ProductId, "ProductId");

            entity.HasIndex(e => e.ProductTypeId, "ProductTypeId");

            entity.HasIndex(e => e.Year, "Year");

            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Month).HasDefaultValueSql("'0'");
            entity.Property(e => e.ProductId).HasDefaultValueSql("'0'");
            entity.Property(e => e.ProductTypeId).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockBuy).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockBuyPrice).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockFirst).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockLast).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockSell).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockSellPrice).HasDefaultValueSql("'0'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Year).HasDefaultValueSql("'0'");

            entity.HasOne(d => d.Branch).WithMany(p => p.MonthlyStock)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("monthly_stock_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.MonthlyStock)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("monthly_stock_ibfk_1");

            entity.HasOne(d => d.Product).WithMany(p => p.MonthlyStock)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("monthly_stock_ibfk_4");

            entity.HasOne(d => d.ProductType).WithMany(p => p.MonthlyStock)
                .HasForeignKey(d => d.ProductTypeId)
                .HasConstraintName("monthly_stock_ibfk_3");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("product");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.ProductName, "ProductName").IsUnique();

            entity.HasIndex(e => e.ProductTypeId, "ProductTypeId");

            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.BuyPrice).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.PathFile).HasMaxLength(500);
            entity.Property(e => e.ProductName).HasMaxLength(50);
            entity.Property(e => e.ProductNo).HasMaxLength(500);
            entity.Property(e => e.ProductTypeId).HasDefaultValueSql("'0'");
            entity.Property(e => e.SellPrice).HasDefaultValueSql("'0'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.Product)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("product_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.Product)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("product_ibfk_1");

            entity.HasOne(d => d.ProductType).WithMany(p => p.Product)
                .HasForeignKey(d => d.ProductTypeId)
                .HasConstraintName("product_ibfk_3");
        });

        modelBuilder.Entity<ProductPriceRate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("product_price_rate");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.ProductId, "ProductId");

            entity.HasIndex(e => e.ProductTypeId, "ProductTypeId");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.PercentPrice).HasDefaultValueSql("'0'");
            entity.Property(e => e.PriceFrom).HasDefaultValueSql("'0'");
            entity.Property(e => e.PriceTo).HasDefaultValueSql("'0'");
            entity.Property(e => e.TotalPrice).HasDefaultValueSql("'0'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.ProductPriceRate)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("product_price_rate_ibfk_1");
        });

        modelBuilder.Entity<ProductType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("product_type");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.ProductTypeName, "ProductTypeName").IsUnique();

            entity.Property(e => e.Active).HasColumnType("bit(1)");
            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.ProductTypeName).HasMaxLength(50);
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.ProductType)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("product_type_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.ProductType)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("product_type_ibfk_1");
        });

        modelBuilder.Entity<Profil>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("profil");

            entity.HasIndex(e => e.Name, "Name").IsUnique();

            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ProfilMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("profil_menu");

            entity.HasIndex(e => e.MenuId, "MenuId");

            entity.HasIndex(e => e.ParentMenuId, "ParentMenuId");

            entity.HasIndex(e => e.ProfilId, "ProfilId");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.MenuId).HasDefaultValueSql("'0'");
            entity.Property(e => e.ParentMenuId).HasDefaultValueSql("'0'");
            entity.Property(e => e.ProfilId).HasDefaultValueSql("'0'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Menu).WithMany(p => p.ProfilMenuMenu)
                .HasForeignKey(d => d.MenuId)
                .HasConstraintName("profil_menu_ibfk_3");

            entity.HasOne(d => d.ParentMenu).WithMany(p => p.ProfilMenuParentMenu)
                .HasForeignKey(d => d.ParentMenuId)
                .HasConstraintName("profil_menu_ibfk_2");

            entity.HasOne(d => d.Profil).WithMany(p => p.ProfilMenu)
                .HasForeignKey(d => d.ProfilId)
                .HasConstraintName("profil_menu_ibfk_1");
        });

        modelBuilder.Entity<ProfilUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("profil_user");

            entity.HasIndex(e => e.ProfilId, "ProfilId");

            entity.HasIndex(e => e.UserId, "UserId");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.ProfilId).HasDefaultValueSql("'0'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasDefaultValueSql("'0'");

            entity.HasOne(d => d.Profil).WithMany(p => p.ProfilUser)
                .HasForeignKey(d => d.ProfilId)
                .HasConstraintName("profil_user_ibfk_1");

            entity.HasOne(d => d.User).WithMany(p => p.ProfilUser)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("profil_user_ibfk_2");
        });

        modelBuilder.Entity<PurchaseOrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("purchase_order_detail");

            entity.HasIndex(e => e.ProductId, "ProductId");

            entity.HasIndex(e => e.ProductTypeId, "ProductTypeId");

            entity.HasIndex(e => e.PurchaseHeaderId, "PurchaseHeaderId");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.ProductId).HasDefaultValueSql("'0'");
            entity.Property(e => e.ProductTypeId).HasDefaultValueSql("'0'");
            entity.Property(e => e.PurchaseHeaderId).HasDefaultValueSql("'0'");
            entity.Property(e => e.Subtotal).HasDefaultValueSql("'0'");

            entity.HasOne(d => d.Product).WithMany(p => p.PurchaseOrderDetail)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("purchase_order_detail_ibfk_3");

            entity.HasOne(d => d.ProductType).WithMany(p => p.PurchaseOrderDetail)
                .HasForeignKey(d => d.ProductTypeId)
                .HasConstraintName("purchase_order_detail_ibfk_2");

            entity.HasOne(d => d.PurchaseHeader).WithMany(p => p.PurchaseOrderDetail)
                .HasForeignKey(d => d.PurchaseHeaderId)
                .HasConstraintName("purchase_order_detail_ibfk_1");
        });

        modelBuilder.Entity<PurchaseOrderHeader>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("purchase_order_header");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.PurchaseDate, "PurchaseDate");

            entity.HasIndex(e => e.PurchaseNo, "PurchaseNo");

            entity.HasIndex(e => e.SupplierId, "SupplierId");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseNo).HasMaxLength(50);
            entity.Property(e => e.Quantity).HasDefaultValueSql("'0'");
            entity.Property(e => e.Total).HasDefaultValueSql("'0'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.PurchaseOrderHeader)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("purchase_order_header_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.PurchaseOrderHeader)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("purchase_order_header_ibfk_1");

            entity.HasOne(d => d.Supplier).WithMany(p => p.PurchaseOrderHeader)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("purchase_order_header_ibfk_3");
        });

        modelBuilder.Entity<SalesOrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("sales_order_detail");

            entity.HasIndex(e => e.ProductId, "ProductId");

            entity.HasIndex(e => e.ProductTypeId, "ProductTypeId");

            entity.HasIndex(e => e.SalesHeaderId, "SalesHeaderId");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Price).HasDefaultValueSql("'0'");
            entity.Property(e => e.ProductId).HasDefaultValueSql("'0'");
            entity.Property(e => e.ProductTypeId).HasDefaultValueSql("'0'");
            entity.Property(e => e.Quantity).HasDefaultValueSql("'0'");
            entity.Property(e => e.SalesHeaderId).HasDefaultValueSql("'0'");
            entity.Property(e => e.Subtotal).HasDefaultValueSql("'0'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Product).WithMany(p => p.SalesOrderDetail)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("sales_order_detail_ibfk_3");

            entity.HasOne(d => d.ProductType).WithMany(p => p.SalesOrderDetail)
                .HasForeignKey(d => d.ProductTypeId)
                .HasConstraintName("sales_order_detail_ibfk_2");

            entity.HasOne(d => d.SalesHeader).WithMany(p => p.SalesOrderDetail)
                .HasForeignKey(d => d.SalesHeaderId)
                .HasConstraintName("sales_order_detail_ibfk_1");
        });

        modelBuilder.Entity<SalesOrderHeader>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("sales_order_header");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.CustomerId, "CustomerId");

            entity.HasIndex(e => e.InvoiceNo, "InvoiceNo");

            entity.HasIndex(e => e.SalesOrderDate, "SalesOrderDate");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.InvoiceNo).HasMaxLength(50);
            entity.Property(e => e.Quantity).HasDefaultValueSql("'0'");
            entity.Property(e => e.SalesId).HasDefaultValueSql("'0'");
            entity.Property(e => e.SalesOrderDate).HasColumnType("datetime");
            entity.Property(e => e.Total).HasDefaultValueSql("'0'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.SalesOrderHeader)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sales_order_header_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.SalesOrderHeader)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sales_order_header_ibfk_1");

            entity.HasOne(d => d.Customer).WithMany(p => p.SalesOrderHeader)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sales_order_header_ibfk_3");
        });

        modelBuilder.Entity<Schedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("schedule");

            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<SendEmail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("send_email");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.CustomerId, "CustomerId");

            entity.HasIndex(e => e.MessageId, "MessageId");

            entity.HasIndex(e => e.ScheduleId, "ScheduleId");

            entity.HasIndex(e => new { e.ScheduleId, e.MessageId }, "ScheduleId_2");

            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasDefaultValueSql("'0'");
            entity.Property(e => e.MessageId).HasDefaultValueSql("'0'");
            entity.Property(e => e.ScheduleId).HasDefaultValueSql("'0'");
            entity.Property(e => e.Send)
                .HasDefaultValueSql("b'0'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.SendEmail)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("send_email_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.SendEmail)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("send_email_ibfk_1");

            entity.HasOne(d => d.Customer).WithMany(p => p.SendEmail)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("send_email_ibfk_3");

            entity.HasOne(d => d.Message).WithMany(p => p.SendEmail)
                .HasForeignKey(d => d.MessageId)
                .HasConstraintName("send_email_ibfk_5");

            entity.HasOne(d => d.Schedule).WithMany(p => p.SendEmail)
                .HasForeignKey(d => d.ScheduleId)
                .HasConstraintName("send_email_ibfk_4");
        });

        modelBuilder.Entity<SendEmailFail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("send_email_fail");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.ErrorDescription).HasMaxLength(500);
            entity.Property(e => e.Message).HasMaxLength(500);
        });

        modelBuilder.Entity<SendSms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("send_sms");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.CustomerId, "CustomerId");

            entity.HasIndex(e => e.MessageId, "MessageId");

            entity.HasIndex(e => e.ScheduleId, "ScheduleId");

            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasDefaultValueSql("'0'");
            entity.Property(e => e.MessageId).HasDefaultValueSql("'0'");
            entity.Property(e => e.ScheduleId).HasDefaultValueSql("'0'");
            entity.Property(e => e.Send)
                .HasDefaultValueSql("b'0'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.SendSms)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("send_sms_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.SendSms)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("send_sms_ibfk_1");

            entity.HasOne(d => d.Customer).WithMany(p => p.SendSms)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("send_sms_ibfk_3");

            entity.HasOne(d => d.Message).WithMany(p => p.SendSms)
                .HasForeignKey(d => d.MessageId)
                .HasConstraintName("send_sms_ibfk_5");

            entity.HasOne(d => d.Schedule).WithMany(p => p.SendSms)
                .HasForeignKey(d => d.ScheduleId)
                .HasConstraintName("send_sms_ibfk_4");
        });

        modelBuilder.Entity<SendSmsFail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("send_sms_fail");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.ErrorDescription).HasMaxLength(500);
            entity.Property(e => e.Message).HasMaxLength(500);
            entity.Property(e => e.NoSms)
                .HasMaxLength(50)
                .HasColumnName("NoSMS");
        });

        modelBuilder.Entity<SendWhatsapp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("send_whatsapp");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.CustomerId, "CustomerId");

            entity.HasIndex(e => e.MessageId, "MessageId");

            entity.HasIndex(e => e.ScheduleId, "ScheduleId");

            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasDefaultValueSql("'0'");
            entity.Property(e => e.MessageId).HasDefaultValueSql("'0'");
            entity.Property(e => e.ScheduleId).HasDefaultValueSql("'0'");
            entity.Property(e => e.Send)
                .HasDefaultValueSql("b'0'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.SendWhatsapp)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("send_whatsapp_ibfk_5");

            entity.HasOne(d => d.Company).WithMany(p => p.SendWhatsapp)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("send_whatsapp_ibfk_4");

            entity.HasOne(d => d.Customer).WithMany(p => p.SendWhatsapp)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("send_whatsapp_ibfk_1");

            entity.HasOne(d => d.Message).WithMany(p => p.SendWhatsapp)
                .HasForeignKey(d => d.MessageId)
                .HasConstraintName("send_whatsapp_ibfk_3");

            entity.HasOne(d => d.Schedule).WithMany(p => p.SendWhatsapp)
                .HasForeignKey(d => d.ScheduleId)
                .HasConstraintName("send_whatsapp_ibfk_2");
        });

        modelBuilder.Entity<SendWhatsappFail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("send_whatsapp_fail");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.ErrorDescription).HasMaxLength(500);
            entity.Property(e => e.Message).HasMaxLength(500);
            entity.Property(e => e.NoWhatsApp).HasMaxLength(50);
        });

        modelBuilder.Entity<StockOpname>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("stock_opname");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.ProductId, "ProductId");

            entity.HasIndex(e => e.ProductTypeId, "ProductTypeId");

            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Month).HasDefaultValueSql("'0'");
            entity.Property(e => e.ProductId).HasDefaultValueSql("'0'");
            entity.Property(e => e.ProductTypeId).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockFirst).HasDefaultValueSql("'0'");
            entity.Property(e => e.StockOpnameDefault).HasDefaultValueSql("'0'");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Year).HasDefaultValueSql("'0'");

            entity.HasOne(d => d.Branch).WithMany(p => p.StockOpname)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("stock_opname_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.StockOpname)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("stock_opname_ibfk_1");

            entity.HasOne(d => d.Product).WithMany(p => p.StockOpname)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("stock_opname_ibfk_4");

            entity.HasOne(d => d.ProductType).WithMany(p => p.StockOpname)
                .HasForeignKey(d => d.ProductTypeId)
                .HasConstraintName("stock_opname_ibfk_3");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("supplier");

            entity.HasIndex(e => e.BranchId, "BranchId");

            entity.HasIndex(e => e.CompanyId, "CompanyId");

            entity.HasIndex(e => e.Name, "Name").IsUnique();

            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Fax).HasMaxLength(15);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Telp).HasMaxLength(15);
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.Supplier)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("supplier_ibfk_2");

            entity.HasOne(d => d.Company).WithMany(p => p.Supplier)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("supplier_ibfk_1");
        });

        modelBuilder.Entity<UserToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("user_token");

            entity.HasIndex(e => e.UserId, "UserId");

            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Token).HasMaxLength(500);
            entity.Property(e => e.TokenExpired).HasColumnType("datetime");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasDefaultValueSql("'0'");

            entity.HasOne(d => d.User).WithMany(p => p.UserToken)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("user_token_ibfk_1");
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("users");

            entity.Property(e => e.Active)
                .HasDefaultValueSql("b'0'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.BranchId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CompanyId).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreateBy).HasMaxLength(50);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.LastLogin).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Password).HasMaxLength(500);
            entity.Property(e => e.PasswordExpired).HasColumnType("datetime");
            entity.Property(e => e.UpdateBy).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UserName).HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}